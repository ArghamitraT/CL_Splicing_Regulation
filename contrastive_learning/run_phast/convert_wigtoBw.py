"""
Script: wig_to_bw_job_submission.py

Description:
This script automates the creation and submission of SLURM jobs for converting WIG files to BigWig (BW) format. 
It generates and submits job files for all WIG files in a specified input directory using the `wigToBigWig` tool.

The script handles:
1. Generating unique program and SLURM job files for each WIG file.
2. Creating necessary directories to organize outputs and job files.
3. Submitting the generated SLURM jobs to the scheduler.
4. Logging details and saving related scripts for reproducibility.

Inputs:
- `INPUT_DIR`: Path to the directory containing WIG files to be processed.
  - Each WIG file will be converted to BigWig format.
- `OUTPUT_DIR`: Path to the output directory where the converted BigWig files will be stored.
- `CHROM_SIZES`: Path to the chromosome sizes file required by `wigToBigWig`.

Outputs:
1. **Program Files** (`.sh`): A shell script for each WIG file containing the command to convert it to BigWig format.
2. **SLURM Submission Files** (`.sh`): A corresponding SLURM submission file for each program file.
3. Job output and log files generated by SLURM.

Workflow:
1. **Directory Setup**:
   - Creates directories to store job files, program files, and outputs.
2. **Job and SLURM File Generation**:
   - Iterates through all WIG files in the specified input directory.
   - Creates a shell script (`.sh`) for converting the WIG file to BigWig.
   - Creates a corresponding SLURM job submission script.
3. **Job Submission**:
   - Makes the generated scripts executable.
   - Submits the SLURM job for each WIG file.
4. **Logging**:
   - Copies relevant scripts to the output directory for reproducibility.
   - Logs the details of the jobs and processing in a `readme` file.

Dependencies:
- Requires Python 3.x with `os`, `time`, and `random` libraries.
- Access to the `wigToBigWig` tool for conversion.
- Access to a SLURM scheduler environment for job submission.

Usage:
Run the script directly with the required parameters specified in the `main()` function:
   python wig_to_bw_job_submission.py

To modify the parameters for a different input or output directory, update the `Parameters: **CHANGE (AT)**` section.

Example:
   python wig_to_bw_job_submission.py

Ensure the specified input directory contains WIG files, the chromosome sizes file is valid, and the SLURM environment is accessible.

Environment:
    slurm_env
"""

import os
import time
import random

trimester = time.strftime("_%Y_%m_%d__%H_%M_%S")
def create_job_dir(dir="", fold_name = ""):
    if dir:
        job_path = os.path.join(dir, fold_name)
        os.mkdir(job_path)

    else:
        job_path = os.path.join(os.getcwd(), fold_name)
        if not os.path.exists(job_path):
            os.mkdir(job_path)

    return job_path

def create_prg_file(prg_file_path, wig_file, bw_file):
   
    header = f"#!/bin/bash\n" + \
    "set -e\n" + \
    "cd $HOME\n" + \
    "source ~/.bashrc\n" + \
    "conda activate phastcon\n" + \
    f"wigToBigWig {wig_file} {CHROM_SIZES} {bw_file}"
 

    with open(prg_file_path, "w") as f:
        f.write(header)
    return prg_file_path
    
    
def copy_weights(desired_weight_path, to_be_saved_path ):
    for file_name in os.listdir(desired_weight_path):
        dir = os.path.join(desired_weight_path, file_name)
        os.system(f"cp {dir} {to_be_saved_path}")


def create_slurm_file(prg_file_path, job_name, slurm_file_path):

    header = f"#!/bin/bash\n" + \
    "##ENVIRONMENT SETTINGS; REPLACE WITH CAUTION\n" + \
    "##NECESSARY JOB SPECIFICATIONS\n" + \
    f"#SBATCH --job-name={job_name}      #Set the job name to \"JobExample1\"\n" + \
    f"#SBATCH --time={hour}:45:00              #Set the wall clock limit to 1hr and 30min,\n" + \
    f"#SBATCH --mem={memory}G              \n" + \
    f"#SBATCH --cpus-per-task={cpu}                   \n" + \
    "#SBATCH --mail-type=END,FAIL    \n" + \
    f"#SBATCH --output={output_dir}/out_{job_name}.%j      #Send stdout/err to\n" + \
    "#SBATCH --mail-user=atalukder@nygenome.org                    \n" + \
    f"{prg_file_path}"

    with open (slurm_file_path, "w") as f:
        f.write(header)
    return slurm_file_path


def get_file_name(kind, l0=0, l1=0, l2=0, l3=0, ext=True):

    file_name = f"{kind}_{trimester}"
    if ext:
        file_name = f"{file_name}.sh"
    return file_name



main_data_dir = "/gpfs/commons/home/atalukder/Contrastive_Learning/files/results"
job_path = "/gpfs/commons/home/atalukder/Contrastive_Learning/files/cluster_job_submission_files"
code_dir = "/gpfs/commons/home/atalukder/Contrastive_Learning/code"
where_to_save = "/gpfs/commons/home/atalukder/Contrastive_Learning/files/results/saved_weights_toResume"

data_dir_0   = create_job_dir(dir= main_data_dir, fold_name= "exprmnt"+trimester)
data_dir   = create_job_dir(dir= data_dir_0, fold_name= "files")
weight_dir = create_job_dir(dir= data_dir_0, fold_name="weights")
output_dir = create_job_dir(dir= data_dir, fold_name="output_files")


""" Parameters: **CHANGE (AT)** """
input_data_dir = "/gpfs/commons/home/atalukder/Contrastive_Learning/data/multiz100way/phastcon_score/new_run/"
code_dir = '/gpfs/commons/home/atalukder/Contrastive_Learning/code/run_phast'
main_script = 'convert_wigToPkl.py'
scripts_tobe_saved= ['generate_bash_generic.py']
name = "run_phast"
hour = 2 # hour
memory = 50 #GB
cpu = 2
environment = 'phastcon'
readme_comment = f"converting wig to bw"
INPUT_DIR= '/gpfs/commons/home/atalukder/Contrastive_Learning/data/multiz100way/phastcon_score/new_run/19_chr/wig_files'
OUTPUT_DIR="/gpfs/commons/home/atalukder/Contrastive_Learning/data/multiz100way/phastcon_score/new_run/19_chr/bw_files"
CHROM_SIZES="/gpfs/commons/home/atalukder/Contrastive_Learning/data/multiz100way/phastcon_score/new_run/hg19.chrom.sizes"  # Replace with actual path to chrom.sizes
""" Parameters: **CHANGE (AT)** """



def create_readme():
    name = os.path.join(data_dir, "readme")
    readme = open(name, "a")
    comment = readme_comment
    readme.write(comment)
    readme.close()


def gen_combination():
    create_readme()
    
    kind = name
    
    files = [f for f in os.listdir(INPUT_DIR) if os.path.isfile(os.path.join(INPUT_DIR, f))]

    for file in files:    
        hash_obj = random.getrandbits(25)
        prg_file_path = os.path.join(job_path, get_file_name(kind= f"prg_{kind}_{hash_obj}"))
        slurm_file_path = os.path.join(job_path, get_file_name(kind= f"slurm_{kind}_{hash_obj}"))
        
        base_name = os.path.splitext(file)[0]
        bw_file = os.path.join(OUTPUT_DIR, f"{base_name}.bw")

        
        # original_path = os.path.join(code_dir, main_script)
        # os.system(f"cp {original_path} {data_dir}")

        wig_file = os.path.join(INPUT_DIR, file)

        create_prg_file(prg_file_path, wig_file, bw_file)
        
        
        create_slurm_file(prg_file_path=prg_file_path, 
                        job_name=get_file_name(kind=f"{kind}_{hash_obj}", ext=False), 
                        slurm_file_path=slurm_file_path)


        ## (AT)
        
        os.system(f"chmod u+x {prg_file_path}")
        os.system(f"chmod u+x {slurm_file_path}")
        os.system(f"sbatch {slurm_file_path}")
# for script in scripts_tobe_saved:
#     script_dir = os.path.join(code_dir, script)
#     os.system(f"cp {script_dir} {data_dir}")
                    

def main():
    gen_combination()

if __name__ == "__main__":
    main()


 #'score_chr19_xenTro7_15_doubled.wig'